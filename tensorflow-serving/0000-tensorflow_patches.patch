From 8f4ca4817835616e52c6be5037c34c6bc1a6dd95 Mon Sep 17 00:00:00 2001
From: Nishidha Panpaliya <npanpa23@in.ibm.com>
Date: Tue, 5 Jan 2021 08:20:02 +0000
Subject: [PATCH] Patches for TF 2.4

---
 WORKSPACE                                     |   1 +
 third_party/tensorflow/BUILD                  |   0
 .../tensorflow/tensorflow_patches.patch       | 196 ++++++++++++++++++
 3 files changed, 197 insertions(+)
 create mode 100644 third_party/tensorflow/BUILD
 create mode 100644 third_party/tensorflow/tensorflow_patches.patch

diff --git a/WORKSPACE b/WORKSPACE
index 54d52e25..14a435e9 100644
--- a/WORKSPACE
+++ b/WORKSPACE
@@ -13,6 +13,7 @@ tensorflow_http_archive(
     name = "org_tensorflow",
     sha256 = "9c94bfec7214853750c7cacebd079348046f246ec0174d01cd36eda375117628",
     git_commit = "582c8d236cb079023657287c318ff26adb239002",
+    patch = "//third_party/tensorflow:tensorflow_patches.patch",
 )
 
 load("@bazel_tools//tools/build_defs/repo:http.bzl", "http_archive")
diff --git a/third_party/tensorflow/BUILD b/third_party/tensorflow/BUILD
new file mode 100644
index 00000000..e69de29b
diff --git a/third_party/tensorflow/tensorflow_patches.patch b/third_party/tensorflow/tensorflow_patches.patch
new file mode 100644
index 00000000..8033aca8
--- /dev/null
+++ b/third_party/tensorflow/tensorflow_patches.patch
@@ -0,0 +1,196 @@
+From aea0f0147936e79981c59bebcb939145c8b0cade Mon Sep 17 00:00:00 2001
+From: Nishidha Panpaliya <npanpa23@in.ibm.com>
+Date: Tue, 5 Jan 2021 08:18:53 +0000
+Subject: [PATCH] TF 2.4 patches
+
+---
+ tensorflow/stream_executor/cuda/BUILD         |  2 +-
+ tensorflow/tensorflow.bzl                     |  4 +-
+ ...m_google_absl_fix_mac_and_nvcc_build.patch | 45 +++++++++++--------
+ third_party/gpus/find_cuda_config.py          |  2 +
+ third_party/tensorrt/BUILD.tpl                |  1 +
+ third_party/tensorrt/tensorrt_configure.bzl   |  2 +
+ 6 files changed, 36 insertions(+), 20 deletions(-)
+
+diff --git a/tensorflow/stream_executor/cuda/BUILD b/tensorflow/stream_executor/cuda/BUILD
+index 7086217fa8e..9cdd1eedb77 100644
+--- a/tensorflow/stream_executor/cuda/BUILD
++++ b/tensorflow/stream_executor/cuda/BUILD
+@@ -271,7 +271,7 @@ alias(
+     name = "cublas_lt_lib",
+     actual = select({
+         "//tensorflow:oss": ":cublas_lt_stub",
+-        "//conditions:default": ":empty_lib",
++        "//conditions:default": "@local_config_cuda//cuda:cublasLt",
+     }),
+     visibility = ["//visibility:public"],
+ )
+diff --git a/tensorflow/tensorflow.bzl b/tensorflow/tensorflow.bzl
+index 096cdd17dcb..a93cc168830 100644
+--- a/tensorflow/tensorflow.bzl
++++ b/tensorflow/tensorflow.bzl
+@@ -335,7 +335,7 @@ def tf_copts(
+         if_enable_mkl(["-DENABLE_MKL"]) +
+         if_ngraph(["-DINTEL_NGRAPH=1"]) +
+         if_android_arm(["-mfpu=neon"]) +
+-        if_linux_x86_64(["-msse3"]) +
++        if_linux_x86_64(["-msse3", "-DNO_CONSTEXPR_FOR_YOU=1"]) +
+         if_ios_x86_64(["-msse4.1"]) +
+         select({
+             clean_dep("//tensorflow:framework_shared_object"): [],
+@@ -868,6 +868,7 @@ def tf_gen_op_wrappers_cc(
+             clean_dep("//tensorflow/core:portable_tensorflow_lib"),
+         ]),
+         copts = tf_copts(),
++        linkopts = ['-lrt'],
+         alwayslink = 1,
+         visibility = visibility,
+         compatible_with = compatible_with,
+@@ -886,6 +887,7 @@ def tf_gen_op_wrappers_cc(
+             clean_dep("//tensorflow/core:portable_tensorflow_lib"),
+         ]),
+         copts = tf_copts(),
++        linkopts = ['-lrt'],
+         alwayslink = 1,
+         visibility = [clean_dep("//tensorflow:internal")],
+         compatible_with = compatible_with,
+diff --git a/third_party/com_google_absl_fix_mac_and_nvcc_build.patch b/third_party/com_google_absl_fix_mac_and_nvcc_build.patch
+index 6301119ab2c..9a7bd8b4b20 100644
+--- a/third_party/com_google_absl_fix_mac_and_nvcc_build.patch
++++ b/third_party/com_google_absl_fix_mac_and_nvcc_build.patch
+@@ -1,7 +1,6 @@
+-diff --git a/absl/container/internal/compressed_tuple.h b/absl/container/internal/compressed_tuple.h
+-index 4bfe92f..01db713 100644
+---- a/absl/container/internal/compressed_tuple.h
+-+++ b/absl/container/internal/compressed_tuple.h
++diff -Naur absl_cpp_org/absl/container/internal/compressed_tuple.h absl_cpp_mod/absl/container/internal/compressed_tuple.h
++--- absl_cpp_org/absl/container/internal/compressed_tuple.h	2020-03-04 20:57:37.000000000 +0000
+++++ absl_cpp_mod/absl/container/internal/compressed_tuple.h	2020-11-11 06:33:08.541531240 +0000
+ @@ -32,7 +32,6 @@
+  #ifndef ABSL_CONTAINER_INTERNAL_COMPRESSED_TUPLE_H_
+  #define ABSL_CONTAINER_INTERNAL_COMPRESSED_TUPLE_H_
+@@ -10,7 +9,7 @@ index 4bfe92f..01db713 100644
+  #include <tuple>
+  #include <type_traits>
+  #include <utility>
+-@@ -77,110 +76,61 @@ constexpr bool IsFinal() {
++@@ -77,110 +76,61 @@
+  #endif
+  }
+  
+@@ -139,7 +138,7 @@ index 4bfe92f..01db713 100644
+  //
+  // To access the members, use member .get<N>() function.
+  //
+-@@ -196,58 +146,36 @@ using TupleMoveConstructible = typename std::conditional<
++@@ -196,58 +146,36 @@
+  template <typename... Ts>
+  class ABSL_INTERNAL_COMPRESSED_TUPLE_DECLSPEC CompressedTuple
+      : private internal_compressed_tuple::CompressedTupleImpl<
+@@ -207,11 +206,10 @@ index 4bfe92f..01db713 100644
+    }
+  };
+  
+-diff --git a/absl/strings/string_view.h b/absl/strings/string_view.h
+-index 1861ea6..c7a916b 100644
+---- a/absl/strings/string_view.h
+-+++ b/absl/strings/string_view.h
+-@@ -283,7 +283,14 @@ class string_view {
++diff -Naur absl_cpp_org/absl/strings/string_view.h absl_cpp_mod/absl/strings/string_view.h
++--- absl_cpp_org/absl/strings/string_view.h	2020-03-04 20:57:37.000000000 +0000
+++++ absl_cpp_mod/absl/strings/string_view.h	2020-11-11 06:33:08.542531246 +0000
++@@ -283,7 +283,14 @@
+    // Returns the ith element of the `string_view` using the array operator.
+    // Note that this operator does not perform any bounds checking.
+    constexpr const_reference operator[](size_type i) const {
+@@ -226,7 +224,7 @@ index 1861ea6..c7a916b 100644
+    }
+  
+    // string_view::at()
+-@@ -292,25 +299,46 @@ class string_view {
++@@ -292,25 +299,46 @@
+    // and an exception of type `std::out_of_range` will be thrown on invalid
+    // access.
+    constexpr const_reference at(size_type i) const {
+@@ -273,7 +271,7 @@ index 1861ea6..c7a916b 100644
+    }
+  
+    // string_view::data()
+-@@ -519,7 +547,14 @@ class string_view {
++@@ -519,7 +547,14 @@
+        (std::numeric_limits<difference_type>::max)();
+  
+    static constexpr size_type CheckLengthInternal(size_type len) {
+@@ -288,11 +286,10 @@ index 1861ea6..c7a916b 100644
+    }
+  
+    static constexpr size_type StrlenInternal(const char* str) {
+-diff --git a/absl/time/internal/cctz/BUILD.bazel b/absl/time/internal/cctz/BUILD.bazel
+-index 7a53c81..159b0f0 100644
+---- a/absl/time/internal/cctz/BUILD.bazel
+-+++ b/absl/time/internal/cctz/BUILD.bazel
+-@@ -74,15 +74,6 @@ cc_library(
++diff -Naur absl_cpp_org/absl/time/internal/cctz/BUILD.bazel absl_cpp_mod/absl/time/internal/cctz/BUILD.bazel
++--- absl_cpp_org/absl/time/internal/cctz/BUILD.bazel	2020-03-04 20:57:37.000000000 +0000
+++++ absl_cpp_mod/absl/time/internal/cctz/BUILD.bazel	2020-11-11 06:33:08.542531246 +0000
++@@ -74,15 +74,6 @@
+          "include/cctz/time_zone.h",
+          "include/cctz/zone_info_source.h",
+      ],
+@@ -308,3 +305,15 @@ index 7a53c81..159b0f0 100644
+      visibility = ["//visibility:public"],
+      deps = [
+          ":civil_time",
++diff -Naur absl_cpp_org/absl/time/internal/cctz/include/cctz/civil_time_detail.h absl_cpp_mod/absl/time/internal/cctz/include/cctz/civil_time_detail.h
++--- absl_cpp_org/absl/time/internal/cctz/include/cctz/civil_time_detail.h	2020-03-04 20:57:37.000000000 +0000
+++++ absl_cpp_mod/absl/time/internal/cctz/include/cctz/civil_time_detail.h	2020-11-11 06:34:42.238047397 +0000
++@@ -23,7 +23,7 @@
++ #include "absl/base/config.h"
++ 
++ // Disable constexpr support unless we are in C++14 mode.
++-#if __cpp_constexpr >= 201304 || (defined(_MSC_VER) && _MSC_VER >= 1910)
+++#if (!defined(NO_CONSTEXPR_FOR_YOU) && __cpp_constexpr >= 201304) || (defined(_MSC_VER) && _MSC_VER >= 1910)
++ #define CONSTEXPR_D constexpr  // data
++ #define CONSTEXPR_F constexpr  // function
++ #define CONSTEXPR_M constexpr  // member
+diff --git a/third_party/gpus/find_cuda_config.py b/third_party/gpus/find_cuda_config.py
+index 80f343023cd..6a85107a65c 100644
+--- a/third_party/gpus/find_cuda_config.py
++++ b/third_party/gpus/find_cuda_config.py
+@@ -587,6 +587,8 @@ def find_cuda_config():
+     if tuple(int(v) for v in cuda_version.split(".")) < (10, 1):
+       # Before CUDA 10.1, cuBLAS was in the same directory as the toolkit.
+       cublas_paths = cuda_paths
++
++    cublas_paths = cuda_paths
+     cublas_version = os.environ.get("TF_CUBLAS_VERSION", "")
+     result.update(
+         _find_cublas_config(cublas_paths, cublas_version, cuda_version))
+diff --git a/third_party/tensorrt/BUILD.tpl b/third_party/tensorrt/BUILD.tpl
+index dfa06ced2ed..0b386f93db4 100644
+--- a/third_party/tensorrt/BUILD.tpl
++++ b/third_party/tensorrt/BUILD.tpl
+@@ -25,6 +25,7 @@ cc_library(
+     srcs = [":tensorrt_lib"],
+     copts = cuda_default_copts(),
+     data = [":tensorrt_lib"],
++    linkopts = ['-L/usr/lib64'],
+     linkstatic = 1,
+     deps = [
+         ":tensorrt_headers",
+diff --git a/third_party/tensorrt/tensorrt_configure.bzl b/third_party/tensorrt/tensorrt_configure.bzl
+index 9c980a92cf8..deafd2a5a8a 100644
+--- a/third_party/tensorrt/tensorrt_configure.bzl
++++ b/third_party/tensorrt/tensorrt_configure.bzl
+@@ -101,6 +101,8 @@ def _create_local_tensorrt_repository(repository_ctx):
+ 
+     # Copy the library and header files.
+     libraries = [lib_name(lib, cpu_value, trt_version) for lib in _TF_TENSORRT_LIBS]
++    libraries.append("libmemcpy-2.14.so")
++    libraries.append("libmyelin.so.1")
+     library_dir = config["tensorrt_library_dir"] + "/"
+     headers = _get_tensorrt_headers(trt_version)
+     include_dir = config["tensorrt_include_dir"] + "/"
+-- 
+2.27.0
+
-- 
2.27.0

